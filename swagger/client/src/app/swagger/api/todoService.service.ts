/**
 * Todo API Endpoints
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import { HttpClient, HttpEvent, HttpHeaders, HttpResponse } from '@angular/common/http';

import {Observable} from 'rxjs';

import {Todo} from '../model/todo';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class TodoServiceService {

  public selectedTodo: Todo | null = null;

  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  protected basePath = 'https://localhost:8080';

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * Deletes a todo entry
   *
   * @param id Primary key of the todo entity
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteUsingPOST(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;

  public deleteUsingPOST(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;

  public deleteUsingPOST(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;

  public deleteUsingPOST(id: string, observe: any = 'body', reportProgress = false): Observable<any> {

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deleteUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.post<any>(`${this.basePath}/todo/delete/${encodeURIComponent(String(id))}`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * list
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Todo>>;

  public listUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Todo>>>;

  public listUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Todo>>>;

  public listUsingGET(observe: any = 'body', reportProgress = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<Todo>>(`${this.basePath}/todo/list`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * save
   *
   * @param todo todo
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public saveUsingPOST(todo: Todo, observe?: 'body', reportProgress?: boolean): Observable<any>;

  public saveUsingPOST(todo: Todo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;

  public saveUsingPOST(todo: Todo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;

  public saveUsingPOST(todo: Todo, observe: any = 'body', reportProgress = false): Observable<any> {

    if (todo === null || todo === undefined) {
      throw new Error('Required parameter todo was null or undefined when calling saveUsingPOST.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(`${this.basePath}/todo/save`,
      todo,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

}
